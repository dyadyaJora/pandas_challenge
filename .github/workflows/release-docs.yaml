name: Build mkdocs site and upload to S3 - develop version

on:
  push:
    paths:
      - 'docs/**'
      - 'mkdocs.yaml'
    branches:
    - "master"
  pull_request:
    branches:
      - "master"

env:
  AWS_REGION : "us-east-1"
  AWS_REGION_LAB: "us-east-1"
  MAX_BRANCH_DEPLOYED: 5
  MAX_COMMIT_PER_BRANCH_DEPLOYED: 3
  MAX_PRO_VERSIONS: 3
  BUCKET_NAME_LAB: "pandas-challenge-github-action-test-bucket"

permissions:
  id-token: write
  contents: write
  discussions: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Download source
      uses: actions/checkout@v3
    - run: git fetch --depth=1 origin +refs/tags/*:refs/tags/* || true
      name: Fetch git tags
    - name: Install Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: pip
    - name: Install Python dependencies
      run: |
        pip install -r requirements.txt
    - name: Build site
      run: mkdocs build
    - name: Setup versions in env variables
      id: version
      run: |
        function version { echo "$@" | awk -F. '{ printf("%d%03d%03d%03d\n", $1,$2,$3,$4); }'; }
        echo "THIS_VERSION=$(cat version | sed s/^v//)" >> $GITHUB_ENV
        echo "THIS_VERSION_COMPARABLE=$(version $(cat version | sed s/^v//))" >> $GITHUB_ENV
        echo "LATEST_VERSION_COMPARABLE=$(version $(git describe --tags $(git rev-list --tags --max-count=1) | sed s/^v// 2> /dev/null || echo '0'))" >> $GITHUB_ENV
        echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}"  >> $GITHUB_ENV
        echo "SHA_SHORT=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
    - name: configure LAB AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ secrets.ASSUME_ROLE_LAB }}
        role-session-name: samplerolesession
        aws-region: ${{ env.AWS_REGION_LAB }}
    - name:  Copy to LAB S3
      run: |
        replace_special_characters() { local input_string="$1"; local replaced_string=$(echo "$input_string" | sed 's/[^a-zA-Z0-9]/_/g'); echo "$replaced_string"; }

        escaped_branch_name=$(replace_special_characters "$BRANCH_NAME")
        date_prefix=$(date +%Y-%m-%d-%H-%M-%S_)
        aws s3 sync ./site/ s3://${{ env.BUCKET_NAME_LAB }}/$escaped_branch_name/$date_prefix$SHA_SHORT/

        echo "DOCS_LINK=https://${{ env.BUCKET_NAME_LAB }}.s3.amazonaws.com/$escaped_branch_name/$date_prefix$SHA_SHORT/index.html" >> $GITHUB_ENV

        echo "Cleanup branch folders"
        aws s3 cp s3://${{ env.BUCKET_NAME_LAB }}/.branches .branches_old
        bash ./scripts/s3branchrotate.sh $escaped_branch_name .branches_old
        lines_count=$(cat .branches_old | wc -l)
        last_branch=$(tail -1 .branches_old)
        head -${{ env.MAX_BRANCH_DEPLOYED }} .branches_old > .branches
        aws s3 cp .branches s3://${{ env.BUCKET_NAME_LAB }}/
        [ "$lines_count" -gt "${{ env.MAX_BRANCH_DEPLOYED }}" ] && aws s3 rm --recursive s3://${{ env.BUCKET_NAME_LAB }}/$last_branch/

        echo "Cleanup commit folders"
        aws s3 ls s3://${{ env.BUCKET_NAME_LAB }}/$escaped_branch_name/ | awk '$NF ~ /\/$/ { print $NF }' > .commit_versions
        cat .commit_versions  # Debug: print the versions

        oldest_version=$(head -1 .commit_versions)
        versions_count=$(cat .commit_versions | wc -l)
        echo "Oldest version: $oldest_version"
        echo "Versions count: $versions_count"

        if [ "$versions_count" -gt "${{ env.MAX_COMMIT_PER_BRANCH_DEPLOYED }}" ]; then
            echo "Removing oldest version: $oldest_version"
            aws s3 rm --recursive s3://${{ env.BUCKET_NAME_LAB }}/$escaped_branch_name/$oldest_version || echo "Error removing version"
        else
            echo "No need to remove versions."
        fi
    - name: Check if triggered by pull request
      if: ${{ github.event_name == 'pull_request' }}
      uses: actions/github-script@v6
      env:
        DOCS_LINK: ${{ env.DOCS_LINK }}
      with:
        script: |
          const { DOCS_LINK } = process.env
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'Docs deployed to ' + DOCS_LINK
          })
    - name: Create Github Release
      if: ${{ github.ref == 'refs/heads/master' && env.THIS_VERSION_COMPARABLE > env.LATEST_VERSION_COMPARABLE }}
      id: create_release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.THIS_VERSION }}
        name: Release v${{ env.THIS_VERSION }}
        body: |
          See the CHANGELOG for a list of features included in this release
        draft: false
        prerelease: false
    - name: configure PRO AWS credentials
      if: ${{ github.ref == 'refs/heads/master' && env.THIS_VERSION_COMPARABLE > env.LATEST_VERSION_COMPARABLE }}
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ secrets.ASSUME_ROLE }}
        role-session-name: samplerolesession
        aws-region: ${{ env.AWS_REGION }}
    - name:  Copy to PRO S3
      if: ${{ github.ref == 'refs/heads/master' && env.THIS_VERSION_COMPARABLE > env.LATEST_VERSION_COMPARABLE }}
      run: |
        version=$(cat version)
        date_prefix=$(date +%Y-%m-%d-%H-%M-%S_)
        aws s3 sync ./site/ s3://${{ secrets.BUCKET_NAME }}/$date_prefix$version
        aws s3 sync ./site/ s3://${{ secrets.BUCKET_NAME }}/latest

        echo "Cleanup OLD PRO version folders"
        aws s3 ls s3://${{ secrets.BUCKET_NAME }}/ | awk '$NF ~ /\/$/ { print $NF }' | sed -E 's|^latest/$||g' | grep -Ev "^$" > .pro_versions
        cat .pro_versions  # Debug: print the versions

        oldest_version=$(head -1 .pro_versions)
        versions_count=$(cat .pro_versions | wc -l)
        echo "Oldest version: $oldest_version"
        echo "Versions count: $versions_count"

        if [ "$versions_count" -gt "${{ env.MAX_PRO_VERSIONS }}" ]; then
            echo "Removing oldest version: $oldest_version"
            aws s3 rm --recursive s3://${{ secrets.BUCKET_NAME }}/$oldest_version/ || echo "Error removing version"
        else
            echo "No need to remove versions."
        fi
    - name: Invalidate PRO CloudFront cache
      if: ${{ github.ref == 'refs/heads/master' && env.THIS_VERSION_COMPARABLE > env.LATEST_VERSION_COMPARABLE }}
      run: |
        aws cloudfront create-invalidation --distribution-id ${{ secrets.DISTRIBUTION_ID }} --paths "/*"

