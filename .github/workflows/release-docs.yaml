name: Build mkdocs site and upload to S3 - develop version

on:
  push:
    branches:
    - "master"
    - "**/**"
  pull_request:
    branches:
      - "master"

env:
  AWS_REGION : "us-east-1"

permissions:
      id-token: write
      contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Download source
      uses: actions/checkout@v3
    - run: git fetch --depth=1 origin +refs/tags/*:refs/tags/* || true
      name: Fetch git tags
    - name: Install Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: pip
    - name: Install Python dependencies
      run: |
        pip install -r requirements.txt
    - name: Build site
      run: mkdocs build
    - name: Setup versions in env variables
      id: version
      run: |
        function version { echo "$@" | awk -F. '{ printf("%d%03d%03d%03d\n", $1,$2,$3,$4); }'; }
        echo "THIS_VERSION=$(cat version | sed s/^v//)" >> $GITHUB_ENV
        echo "THIS_VERSION_COMPARABLE=$(version $(cat version | sed s/^v//))" >> $GITHUB_ENV
        echo "LATEST_VERSION_COMPARABLE=$(version $(git describe --tags $(git rev-list --tags --max-count=1) | sed s/^v// 2> /dev/null || echo '0'))" >> $GITHUB_ENV
        echo "$THIS_VERSION $THIS_VERSION_COMPARABLE $LATEST_VERSION_COMPARABLE"
#    - name: Create Github Release
    - name: configure LAB AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ secrets.ASSUME_ROLE_LAB }}
        role-session-name: samplerolesession
        aws-region: ${{ env.AWS_REGION_LAB }}
    - name:  Copy to LAB S3
      run: |
        aws s3 sync ./site/ s3://${{ secrets.BUCKET_NAME }}/
    - name: configure PRO AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ secrets.ASSUME_ROLE }}
        role-session-name: samplerolesession
        aws-region: ${{ env.AWS_REGION }}
    - name:  Copy to PRO S3
      run: |
        aws s3 sync ./site/ s3://${{ secrets.BUCKET_NAME }}/
    - name: Invalidate PRO CloudFront cache
      run: |
        aws cloudfront create-invalidation --distribution-id ${{ secrets.DISTRIBUTION_ID }} --paths "/*"
